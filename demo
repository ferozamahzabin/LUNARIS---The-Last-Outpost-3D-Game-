from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *
import math, random, time

# =========================
# Global State
# =========================
player_pos = [0.0, 0.0, 0.0]   # Astronaut position
player_angle = 0.0             # Facing direction

PLAYER_SPEED = 5.0

# Camera orbit variables
camera_angle = 135.0
camera_height = 200.0
camera_radius = 100.0
camera_pos = [camera_radius, 0.0, camera_height]

# Moon base variables
BASE_RADIUS = 400
NUM_CRATERS = 20
craters = []

# Stars for 3D space sky
star_positions = []
blink_state = {}
NUM_STARS = 400
stars = []


# =========================
# STAR GENERATION & DRAWING
# =========================
def generate_stars(count=300):
    """Generate stars in a full 3D spherical sky"""
    global star_positions, blink_state
    star_positions = []
    blink_state = {}
    for i in range(count):
        theta = random.uniform(0, 2 * math.pi)
        phi = random.uniform(0, math.pi)
        r = random.uniform(1000, 1500)
        x = r * math.cos(theta) * math.sin(phi)
        y = r * math.sin(theta) * math.sin(phi)
        z = r * math.cos(phi)
        star_positions.append((x, y, z))
        blink_state[i] = random.random()

def draw_stars():
    glPointSize(2)
    glBegin(GL_POINTS)
    for i, (x, y, z) in enumerate(star_positions):
        brightness = 0.5 + 0.5 * math.sin(time.time() * 3 + i)
        glColor3f(brightness, brightness, brightness)
        glVertex3f(x, y, z)
    glEnd()

# =========================
# MOON BASE & CRATERS
# =========================
def init_craters():
    """Randomly generate crater positions"""
    global craters
    craters = []
    for _ in range(NUM_CRATERS):
        r = random.uniform(20, 50)
        angle = random.uniform(0, 2*math.pi)
        dist = random.uniform(50, BASE_RADIUS - r - 10)
        x = dist * math.cos(angle)
        y = dist * math.sin(angle)
        craters.append((x, y, r))

def init_stars():
    """Generate random star positions across a wide 360° area"""
    global stars
    stars = []
    for _ in range(NUM_STARS):
        # Full spherical starfield placement
        theta = random.uniform(0, 2 * math.pi)   # 360° horizontal
        phi = random.uniform(-math.pi / 2, math.pi / 2)  # vertical angle

        radius = random.uniform(1200, 2500)  # Place stars far enough away
        x = radius * math.cos(phi) * math.cos(theta)
        y = radius * math.cos(phi) * math.sin(theta)
        z = radius * math.sin(phi)

        stars.append((x, y, z))


def draw_stars():
    """Render blinking 3D stars as slightly bigger spheres with optional size variation"""
    glPushMatrix()
    for i, (x, y, z) in enumerate(stars):
        # Increase radius: base 5-7 units for bigger stars
        radius = 5.0 + (i % 3)  # Variation: 5,6,7

        # Blink speed variation
        blink_speed = 200.0 + (i % 3) * 50  # different stars blink differently

        # Brightness for blinking
        brightness = 0.6 + 0.4 * math.sin(glutGet(GLUT_ELAPSED_TIME) / blink_speed + i)
        glColor3f(brightness, brightness, brightness)

        glPushMatrix()
        glTranslatef(x, y, z)
        glutSolidSphere(radius, 8, 8)  # Bigger sphere radius
        glPopMatrix()
    glPopMatrix()






def draw_moon():
    """Draw a realistic 3D moon sphere with craters"""
    glPushMatrix()
    glColor3f(0.7, 0.7, 0.7)  # Light gray color
    glutSolidSphere(BASE_RADIUS / 4, 60, 60)  # Draw moon as a sphere
    glPopMatrix()




    # Draw craters
    for (cx, cy, r) in craters:
        glColor3f(0.4, 0.4, 0.4)
        glBegin(GL_TRIANGLE_FAN)
        glVertex3f(cx, cy, -1)
        for angle in range(0, 361, 10):
            rad = math.radians(angle)
            glVertex3f(cx + r * math.cos(rad), cy + r * math.sin(rad), -1)
        glEnd()

# =========================
# DRAW PLAYER ASTRONAUT
# =========================
def draw_player():
    glPushMatrix()
    glTranslatef(player_pos[0], player_pos[1], player_pos[2] + 10)
    glRotatef(player_angle, 0, 0, 1)

    # Astronaut body
    glColor3f(0.2, 0.6, 1.0)
    glPushMatrix()
    glScalef(10, 10, 20)
    glutSolidCube(1.0)
    glPopMatrix()

    # Astronaut head
    glColor3f(1.0, 0.9, 0.6)
    glTranslatef(0, 0, 20)
    glutSolidSphere(6, 20, 20)
    glPopMatrix()

# =========================
# CAMERA SETUP
# =========================
def setupCamera():
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    gluPerspective(70, 1.25, 0.1, 3000)
    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity()

    x = camera_radius * math.cos(math.radians(camera_angle))
    y = camera_radius * math.sin(math.radians(camera_angle))
    z = camera_height
    gluLookAt(x, y, z, 0.0, 0.0, 0.0, 0, 0, 1)

# =========================
# HUD DISPLAY (SCORE, HEALTH)
# =========================
def draw_text(x, y, text, font=GLUT_BITMAP_HELVETICA_18):
    glColor3f(1, 1, 1)
    glMatrixMode(GL_PROJECTION)
    glPushMatrix()
    glLoadIdentity()
    gluOrtho2D(0, 1000, 0, 800)
    glMatrixMode(GL_MODELVIEW)
    glPushMatrix()
    glLoadIdentity()
    glRasterPos2f(x, y)
    for ch in text:
        glutBitmapCharacter(font, ord(ch))
    glPopMatrix()
    glMatrixMode(GL_PROJECTION)
    glPopMatrix()
    glMatrixMode(GL_MODELVIEW)

# =========================
# CONTROLS
# =========================
def keyboardListener(key, x, y):
    global player_pos, player_angle, camera_radius
    if key == b'w':
        nx = player_pos[0] + math.cos(math.radians(player_angle)) * PLAYER_SPEED
        ny = player_pos[1] + math.sin(math.radians(player_angle)) * PLAYER_SPEED
        if math.hypot(nx, ny) < BASE_RADIUS - 10:
            player_pos[0], player_pos[1] = nx, ny
    elif key == b's':
        nx = player_pos[0] - math.cos(math.radians(player_angle)) * PLAYER_SPEED
        ny = player_pos[1] - math.sin(math.radians(player_angle)) * PLAYER_SPEED
        if math.hypot(nx, ny) < BASE_RADIUS - 10:
            player_pos[0], player_pos[1] = nx, ny
    elif key == b'a':
        player_angle = (player_angle + 5) % 360
    elif key == b'd':
        player_angle = (player_angle - 5) % 360
    elif key == b'z':  # Zoom in
        camera_radius = max(50.0, camera_radius - 20.0)
    elif key == b'x':  # Zoom out
        camera_radius = min(1500.0, camera_radius + 20.0)
    elif key == b'\x1b':  # ESC
        glutLeaveMainLoop()


def specialKeyListener(key, x, y):
    global camera_angle, camera_height, camera_radius
    
    # Existing orbital controls
    if key == GLUT_KEY_LEFT:
        camera_angle = (camera_angle + 5.0) % 360.0
    elif key == GLUT_KEY_RIGHT:
        camera_angle = (camera_angle - 5.0) % 360.0

    # Angled Zoom Controls
    elif key == GLUT_KEY_UP:
        # Zoom in and lower the camera height
        camera_radius = max(50.0, camera_radius - 20.0)
        camera_height = max(50.0, camera_height - 5.0) # Adjust this value for zoom speed
    elif key == GLUT_KEY_DOWN:
        # Zoom out and raise the camera height
        camera_radius = min(1500.0, camera_radius + 20.0)
        camera_height = min(600.0, camera_height + 5.0) # Adjust this value for zoom speed

    # Update camera position based on new radius and height
    x_pos = camera_radius * math.cos(math.radians(camera_angle))
    y_pos = camera_radius * math.sin(math.radians(camera_angle))
    z_pos = camera_height

    gluLookAt(x_pos, y_pos, z_pos, 0.0, 0.0, 0.0, 0, 0, 1)


# =========================
# MAIN DISPLAY FUNCTION
# =========================
def showScreen():
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    glLoadIdentity()
    glClearColor(0.0, 0.0, 0.05, 1.0)


    setupCamera()
    draw_stars()
    draw_moon()
    draw_player()
    draw_text(20, 760, "LUNARIS: The Last Outpost")
    draw_text(20, 730, "Score: 0   Health: 100")

    glutSwapBuffers()

def idle():
    glutPostRedisplay()

# =========================
# MAIN FUNCTION
# =========================
def main():
    glutInit()
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH)
    glutInitWindowSize(1000, 800)
    glutInitWindowPosition(50, 50)
    glutCreateWindow(b"LUNARIS: The Last Outpost")
    glEnable(GL_DEPTH_TEST)
    generate_stars(300)
    init_craters()
    init_stars()
    glutDisplayFunc(showScreen)
    glutKeyboardFunc(keyboardListener)
    glutSpecialFunc(specialKeyListener)
    glutIdleFunc(idle)
    glutMainLoop()

if __name__ == "__main__":
    main()
